<?xml version='1.0' encoding='UTF-8'?> 
<!--

    Copyright 2005-2014 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<chapter xml:id="getting_started" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook"  version="5.0">    
    <title>Getting Started</title>
    <section>
        <title> KRAD Architecture </title>
        <para/>
        <!--TODO: Add content here
        -->
        <figure>
            <title>KRAD Frameworks</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/KRAD_Guide/KRADFrameworks.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <section role="NotInToc">
            <title>Recap</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>KRAD is a complete framework for application development, covering all
                            the application layers (Presentation, Object, and Data)</para>
                    </listitem>
                    <listitem>
                        <para>KRAD is comprised of the following feature areas:</para>
                        <itemizedlist>
                                <listitem>
                                <para>Persistence Framework – Provides services and other utilities
                                    for persisting data. Central to all of this is the Data
                                    Object.</para>
                            </listitem>
                                <listitem>
                                <para>Data Dictionary – Repository of XML metadata that describes
                                    data objects and their attributes. This can be used to configure
                                    common UI attributes along with other things such as
                                    validation.</para>
                            </listitem>
                                <listitem>
                                <para>Document Framework – Provides the ability to create 'e-docs'
                                    that are integrated with the KEW module for workflow and the KIM
                                    module for authorization. In addition to the integration the
                                    framework, it also provides several reusable pieces for creating
                                    new documents.</para>
                            </listitem>
                                <listitem>
                                <para>Business Rules – Code based Rules framework that can be used
                                    to writing business rules corresponding to events that occur on
                                    a document. Future plans include integration with the new KRMS
                                    module.</para>
                            </listitem>
                                <listitem>
                                <para>UI Framework (UIF) – Framework for building Web based user
                                    interfaces using a components that are configured with XML. Most
                                    of the KRAD training is focused on this area.</para>
                            </listitem>
                            <listitem>
                                <para>Inquiry, Lookup, Maintenance – 'Pre-built' views complete with
                                    a backend implementation that can be quickly configured to
                                    create new search screens, screens that display data for
                                    information, and screens that allow table data to be
                                    maintained.</para>
                            </listitem>
                            </itemizedlist>
                    </listitem>
                </itemizedlist>
            </para>
        </section>    
    </section>
    <section>
        <title> Spring Beans </title>
        <para>Spring provides the foundation for much of the KRAD functionality. Many Spring
            offerings are consumed throughout the module, including data sources/templates,
            dependency management, transaction support, remoting, EL, and Spring MVC. In addition to
            the typical ways of using Spring, KRAD uses its powerful configuration system as a basis
            for building declarative frameworks. Developers use much of KRAD by interacting with
            this configuration system. This section will give an overview of using Spring
            configuration and discuss its role in KRAD.</para>
        <section>
            <title>Configuration System</title>
            <para>Spring provides a configuration system that allows us to configure how to
                instantiate, configure, and assemble objects in our application. Furthermore, this
                configuration can take place outside of Java code. As simple as it might sound, this
                is a very powerful construct that has changed many aspects of application
                development. An application of this includes configuring the dependencies for an
                object (other objects it depends on). This is known as Inversion of Control, the
                opposite of the object getting its own dependencies (for example with a
                ServiceLocator for service dependencies).</para>
            <para>KRAD along with the rest of Rice use this feature of Spring to set dependencies
                such as services, DAOs, and data sources. This gives applications built with Rice
                much greater flexibility, as the implementations for these dependencies can be
                changed and configured for us with the Spring configuration.</para>
            <para>Besides setting other object dependencies, the Spring configuration can be used to
                set values for primitive properties (String, Integer, Boolean …). In addition, we
                can instruct Spring on how to set the property value, whether it be by a standard
                setter, constructor argument, or annotated method. Essentially Spring allows us to
                give a formula for creating and populating an object instance completely outside of
                code. This so called formula is known as the bean configuration.</para>
        </section>
        <section>
            <title>Bean Configuration</title>
            <para>Spring supports various methods for bean configuration, the most common of these
                being XML. Each XML file must adhere to the Spring bean doctype and is sometimes
                referred to as 'Spring Bean XML'. The following is the shows the doctype definition
                for the 3.1 release:</para>
            <programlisting linenumbering = "numbered">
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"&gt;
            </programlisting>    
            <para>Note this sets up use for the bean namespace. Spring provides many other XML
                namespaces that are used for various purposes. If one of these are used, the
                corresponding definition must be declared with the bean doctype. One of these other
                namespaces, the 'p' namespace, will be covered later on in this section.</para>
            <para>Once we have our XML file setup, we can begin specifying the bean configuration.
                Each file may contain as many bean configurations as we like (we will see later on
                certain best practices for Spring file organization). To start a new bean
                configuration, we use the bean tag:</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address"&gt;
&lt;/bean&gt;
            </programlisting> 
            <para>As we will see in a bit, the bean configuration is loading into a container managed 
                by Spring. In order to identify a bean configuration, we must give it a unique name 
                using the id attribute. In addition we see here an attribute named class. Recall the 
                purpose of the bean configuration is to construct and populate an object, so we must tell 
                Spring what type of object we want created
            </para>
            <note>
                <title>Bean Names</title>
                <para>Spring allows us to name our bean using the id attribute or the  name
                    attribute, or both. In addition, we can give multiple names in the name
                    attribute that can be used to identify the bean configuration. If all that is
                    not enough, Spring has an alias tag that can be used to give another name for a
                    bean. Best practice for Rice applications is to use the id attribute to specify
                    the main name, and then use the other attributes if needed. </para>
            </note> 
        </section>
        <section><title>Primitive Properties</title><para/>
            <para>The above definition is perfectly acceptable and would result in Spring creating a
                new Address object. However, now let's add some property configuration. In order to
                do this, we must know the available properties on our Address object:</para>
            <para>public class Address { </para>
            <para>  private String street;</para>
            <para>  private String city;</para>
            <para>  private String state;</para>
            <para>  // getters and setters</para>
            <para>}</para>
            <para>We see Address has three properties we can configure. To specify a value for one
                of these properties, we can use the property tag. When using the property tag we
                must specify the name attribute which must match the property name of the class we
                want to populate, and then the value attribute which is the value we wish to
                inject.</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address"&gt;
    &lt;property name="street" value="197 H St"/&gt;
    &lt;property name="city" value="Bloomington"/&gt;
    &lt;property name="state" value="IN"/&gt;
&lt;/bean&gt;
            </programlisting>    
            <para>The above configuration is equivalent to the following Java code:</para>
            <programlisting linenumbering = "numbered">
Address address = new Address();
address.setStreet("197 H St");
address.setCity("Bloomington");
address.setState("IN");  
            </programlisting>    
            <para>Notice that in order for Spring to
                instantiate our object with the above bean configuration, we needed to have a
                default no-argument constructor. However, if our class requires a constructor
                argument, that's no problem. We can use the constructor-arg tag to specify the
                values for the arguments. Suppose our Address class looks like the following:</para>
            <programlisting linenumbering = "numbered"> 
public class Address {
    private String street;
    private String city;
    private String state;
    public Address(String street, String city, String state) {
        this.street = street;
        this.city = city;
        this.state = state;
    }
        // getters and setters
}
            </programlisting>
            <para>We can then use the constructor-arg tag so Spring can pass the appropriate
                arguments for instantiation:</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address"&gt;
    &lt;constructor-arg  index="0" value="197 H St"/&gt;
    &lt;constructor-arg index="1" value="Bloomington"/&gt;
    &lt;constructor-arg index="2" value="IN"/&gt;
>&lt;/bean&gt;
            </programlisting>
            <para>Note when specifying the constructor-arg, we indicating
                the order the argument should be given to the constructor using the index attribute.
                Spring supports other mechanisms for matching the arguments, such as matching by the
                argument class type. </para>
            <note>
                <title>Property Editors</title>
                <para>When specifying a value for a property, Spring will use  PropertyEditor
                    classes to do the datatype conversion. By default, conversion of Strings to
                    Numbers and Booleans work without any additional configuration. Additional
                    property editors are provided for other conversions (such as Date), and in
                    addition custom property editors can be created. However, these must be
                    configured for use with the bean factory. See the full Spring documentation for
                    more information </para>
            </note>
        </section>
        <section><title>Collections</title>
            <para>In order to populate a property type that is a collection, we must use some
                additional tags provided by Spring. These tags correspond to the type of Collection
                we want to create: list, map, set, or properties.</para>
            <para>Suppose we have the following property of type List&lt;String&gt;:</para>
            <programlisting linenumbering = "numbered">
private List&lt;String&gt; phoneNumbers;</programlisting>
            <para>We can then configure this property in our bean configuration as follows:</para>
            <programlisting linenumbering = "numbered">
&lt;property name="phoneNumbers"&gt;
    &lt;list&gt;
        &lt;value&gt;812-333-9090&lt;/value&gt;
        &lt;value&gt;812-444-9900&lt;/value&gt;
    &lt;/list&gt;
&lt;/property&gt;
            </programlisting><para>Notice that instead of using the value attribute,
                we are using the body of the property tag to specify the property value. We then use
                the list tag to specify we want to create a List collection type. Finally, we
                configure entries for the List using the value tag. This is equivalent to the
                following Java code:</para>
            <programlisting linenumbering = "numbered">
List&lt;String&gt; phoneNumbers = new ArrayList&lt;String&gt;();
phoneNumbers.add("812-333-9090");
phoneNumbers.add("812-444-9900");
            </programlisting>
            <para>Now let's take a look at a Map
                example. Suppose we had the following property with type Map&lt;String,
                String&gt;:</para>
            <programlisting linenumbering = "numbered">
private Map&lt;String, String&gt; stateCodeNames;
            </programlisting>
            <para>Our
                corresponding property configuration would look as follows:</para>
            <programlisting linenumbering = "numbered">
&lt;property name="stateCodeNames"&gt;
    &lt;map&gt;
        &lt;entry key="IN" value="Indiana"/&gt;
        &lt;entry key="OH" value="Ohio"/&gt;
        &lt;/map&gt;
&lt;/property&gt;
            </programlisting>
            <para>Here we use the map tag to indicate a Map collection type should be created. Then we 
                specify entries for the map using the entry tag. This requires us to specify the entry 
                key and entry value using the key and value attributes respectively.</para>
            <tip>
                <title>Java Generics</title>
                <para>It is a good practice to use Java generics with Collections.  Spring will use
                    this information to perform datatype conversion as it does for primitive types.
                    Without the generic type information, this conversion cannot be performed. </para>
            </tip>
        </section>
        <section><title>Other Objects</title>
            <para>As mentioned previously, we can use the bean configuration to specify values for
                primitive and collection property types, along with properties of other object
                types. These are known as dependencies of the object to other objects. Since these
                are properties holding other objects, which themselves have properties which we can
                specify using bean configuration, we associate these objects by referencing beans.
                In Spring this is called bean collaboration.</para>
            <para>For referencing other bean definitions Spring provides the ref tag. The ref tag
                can be used by specifying the bean, local, or parent attributes. All of these
                attributes take as a value the id for the bean you wish to reference (matching
                either the actual id value given on the bean, or one of its names or aliases). The
                difference between these attributes pertains to container and scoping rules
                (discussed later on). The most common case with Rice is to use the bean
                attribute.</para>
            <para>For example, in our Address objects, let's now change the state property (of type
                String) to type State. The State class is as follows:</para>
            <programlisting linenumbering = "numbered">
private class State {
    private String stateCode;
    private String stateName;
        // getter and setters
}
            </programlisting>    
            <para>And our Address class now looks like:</para>
            <programlisting linenumbering = "numbered">
public class Address { 
    private String street;
    private String city;
    private State state;
        // getters and setters
}
            </programlisting>    
            <para>First we can create one or more new bean configurations for our State
                object:</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="state-IN" class="edu.myedu.sample.State"&gt;
    &lt;property name="stateCode" value="IN"/&gt;
    &lt;property name="stateName" value="Indiana"/&gt;
&lt;/bean&gt;
&lt;bean id="state-OH" class="edu.myedu.sample.State"&gt;
    &lt;property name="stateCode" value="OH"/&gt;
    &lt;property name="stateName" value="Ohio"/&gt;
&lt;/bean&gt;
            </programlisting>
            <para>Now in our bean configuration for Address, we can
                reference one of these state bean configurations using the ref tag:</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address"&gt;
    &lt;property name="street" value="197 H St"/&gt;
    &lt;property name="city" value="Bloomington"/&gt;
    &lt;property name="state"&gt;
        &lt;ref bean="state-IN"/&gt;
    &lt;/property&gt;
&lt;/bean&gt;
            </programlisting>    
            <para>In Java code, this would be:</para>
            <programlisting linenumbering = "numbered">
Address address = new Address();
address.setStreet("197 H St");
address.setCity("Bloomington");
State state = new State();
state.setStateCode("IN");
state.setStateName("Indiana");
address.setState(state);
            </programlisting>    
            <para>If we wanted to change our address to use the OH state code instead, we simply
                change the bean attribute on the ref tag:</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address"&gt;
    &lt;property name="street" value="197 H St"/&gt;
    &lt;property name="city" value="Bloomington"/&gt;
    &lt;property name="state"&gt;
        &lt;ref bean="state-OH"/&gt;
    &lt;/property&gt;
&lt;/bean&gt;
            </programlisting>
            <para>In addition to referencing other bean definitions for setting object properties,
                Spring gives us an option to construct the bean inline (so called "Inner Beans").
                These beans do not require an id attribute to be specified, and as a consequence and
                not accessible for reference by other bean configurations. We create these inner
                bean configurations exactly as we do other bean configurations. The only difference
                is they do not need an id attribute (as stated), and the bean tag falls within a
                property tag.</para>
            <para>To see this in action, let's suppose we did not any bean configurations for State
                in our XML. Using inner beans, we can accomplish the same result:</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address"&gt;
    &lt;property name="street" value="197 H St"/&gt;
    &lt;property name="city" value="Bloomington"/&gt;
    &lt;property name="state"&gt;
        &lt;bean class="edu.myedu.sample.State"&gt;
            &lt;property name="stateCode" value="IN"/&gt;
            &lt;property name="stateName" value="Indiana"/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
&lt;/bean&gt;
            </programlisting>
            <note>
                <title>Inner Beans</title>
                <para>Inner Beans are sometimes referred to as "Anonymous Beans". As we will see in
                    a bit, the bean configuration is loaded into a container managed by Spring.
                    Beans with the id attribute given have a unique name within the container and
                    can be referenced and retrieved from the container. Inner beans are only
                    available within the context of their parent bean configuration. It is not
                    possible to directly retrieve information about an inner bean from the
                    container. </para>
            </note>
        </section>
        <section>
            <title>Compound Property Names</title>
            <para>As of Spring version 3.0, we can configure so called 'Compound' property names.
                This is a basically a shortcut for setting a property on a reference (nested)
                object. Let's again take the example of the Address class with a property of type
                State. We saw earlier how we can use bean references or inner beans to create and
                populate the State object for the Address property. Using component property names,
                we can sets property values on the State object using the property tag without a
                nested bean tag:</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address"&gt;
    &lt;property name="street" value="197 H St"/&gt;
    &lt;property name="city" value="Bloomington"/&gt;
    &lt;property name="state.stateCode" value="IN"/&gt;
&lt;/bean&gt;
            </programlisting>    
            <para>In order for this to work, the State object must have been already constructed
                (with the Address constructor, bean inheritance, or other means). If the state
                object is null, a NullPointerException will be thrown when Spring tries to set the
                stateCode property.</para>
        </section>
        <section>
            <title>The P-Namespace</title>
            <para>As we have seen and will continue to see, the use of XML configuration for
                constructing objects has many benefits. However, one drawback is the XML is much
                more verbose than code. To help with this problem, Spring introduces the 'p' XML
                namespace. This namespace essentially adds the ability to specify property values as
                attributes on the bean tag instead of the inner property tags. The attribute name
                given with the p namespace should match the name of the property to populate.</para>
            <para>For example, our previous bean configuration for address can be rewritten
                as:</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address" p:street="197 H St" p:city="Bloomington" p:state="IN"/&gt;
            </programlisting>
            <para>Using the p namespace we can also configure references to other beans. The syntax
                for doing this is to add '-ref' after the property name.</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address" p:street="197 H St" p:city="Bloomington" p:state-ref="state-IN"/&gt;
            </programlisting>    
            <para>Here Spring will look for a bean configuration with id equal to "state-IN", and
                use the object constructed from that bean configuration to set the state property on
                Address.</para>
            <para>With the p-namespace we can also set compound property names such as
                'state.stateCode'. Using the p-namespace for setting property values is limited
                however. For instance, there is no mechanism for setting collection property
                types.</para>
        </section>
        <section><title>Bean Parents</title><para>Bean configuration can be inherited for another configuring another bean using the parent
                attribute on the bean tag. The value for the parent attribute is the id or name for
                the bean which configuration should be inherited from. Configuration such as the
                class, property and constructor arguments, initialization methods, and so on, will
                be inherited for the child definition. The child bean definition can override the
                inherited configuration, and add to it.</para><para>As an example let's assume we have a Car class defined as
                follows:</para><programlisting linenumbering = "numbered">
public class Car {
    private String make;
    private String company;
    private String color;
}
            </programlisting><para>We
                can then define bean definitions as
                follows:</para><programlisting linenumbering = "numbered">
&lt;bean id="fordCar" class="edu.myedu.sample.Car" p:company="Ford"/&gt;
&lt;bean id="blueFusion" parent="fordCar" p:make="Fusion" p:color="Blue"/&gt;
&lt;bean id="redFusion" parent="fordCar" p:make="Fusion" p:color="Red"/&gt;
&lt;bean id="blueEscape" parent="blueFusion" p:make="Escape"/&gt;
            </programlisting><para>Notice for the three child beans we did not have to specify the class attribute since it is
                inherited from the parent. In the 'blueFusion' and 'redFusion' beans we are
                extending the 'fordCar' bean to specify the car make and color. For the 'blueEscape'
                bean we extend 'blueFusion' to override the make property. There is no restriction
                on the number of levels the bean inheritance can have.</para><tip>
                <title>Circular Dependencies</title>
                <para>Be careful not to introduce circular dependencies when using bean inheritance.
                    For example, &lt;bean id="a" parent="b"/&gt; and &lt;bean id="b"
                    parent="a"/&gt;. </para>
            </tip>
            <para>When a bean configuration is inherited that includes property configuration for a
                collection class, we must explicitly indicate to merge the entries. This is done by
                adding merge="true" to the collection tag. </para>
            <programlisting linenumbering = "numbered">
&lt;bean id="address" class="edu.myedu.sample.Address"&gt;
    &lt;property name="phoneNumbers"&gt;
        &lt;list&gt;
            &lt;value&gt;812-333-9090&lt;/value&gt;
            &lt;value&gt;812-444-9877&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="joesAddress" parent="address"&gt;
    &lt;property name="phoneNumbers"&gt;
        &lt;list merge="true"&gt;
            &lt;value&gt;333-122-4000&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
            </programlisting>
            <para>With the merge attribute set to true, Joe's address
                will have three phone numbers configured. Taking the merge attribute off (or setting
                to false) will result in Joe only having one configured phone number.</para>
            <tip>
                <title>Overriding Bean Definitions</title>
                <para>Spring also allows us to override the configuration of a bean by creating
                    another bean with the same id (or name). For example, if &lt;bean id="Foo" is
                    configured twice, the one that is loaded last will be used. The order in which
                    the bean configuration is loaded depends on the configuration (order of files).
                    This functionality is important to how Rice and the other Kuali applications
                    provide a great deal of flexibility. An institution implementing the project can
                    specify one or more 'institutional' spring files. These files are loaded after
                    the project Spring files, thus any beans within the institutional files with the
                    same id as a bean in the project Spring files will override. This allows
                    changing beans such as service implementations without modifying a project file.
                    However, be careful that you do not override a bean you did not intend to! </para>
            </tip>
        </section>
        <section>
            <title>Bean Containers</title>
            <para>So far we have looked at how we can use XML to provide bean configuration. Now
                let's look at how Spring uses that information to manage our objects.</para>
            <para>The objects created from the bean configuration are managed within a container. An
                application may contain more than one bean container, depending on configuration. A
                bean container is associated with a set of bean configurations, loaded from a set of
                XML files (or other configuration mechanism if used). Through code, we can then ask
                for an object from the container through the container interface.</para>
            <note>
                <title>Requesting Container Objects</title>
                <para>Typical ways of requesting an object from the container are by type or id. For
                    requesting by type, we can use the interface for the object we want. In the case
                    of Services, this would be the service implementation. This is very important as
                    our application code does not have to have any knowledge of the implementation.
                    In addition to type, we can also request an object by its bean configuration id
                    or name.</para>
            </note>
            <para>One type of bean container Spring provides is an ApplicationContext. This
                container is associated with an application or a module of the application and
                provides services, resources, and other objects for that application/module. The
                application context is initialized when the application starts up and maintained
                throughout the application lifecycle. In Rice, each module has an associated
                ApplicationContext that is configured and initialized with the Rice
                Configurers.</para>
            <figure>
                <title>Bean Factories</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/KRAD_Guide/beanFactoires.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>In addition to the application contexts, other bean factories can be maintained by
                an application. For example, as we will learn about in Chapter 4, the KRAD Data
                Dictionary module maintains a bean factory that holds the dictionary metadata. A set
                of XML files provides the bean configuration for the data dictionary. These XML
                files are separate from the ones that provide configuration for the application
                context containers.</para>
        </section>
        <section><title>Bean Scope</title>
            <para>For the objects Spring creates for us, we can define a Scope. The scope specifies
                how long the created object should live. To specify the scope for a bean, we use the
                scope attribute on the bean tag.</para>
            <programlisting linenumbering = "numbered">
&lt;bean id="MyBean" class="..." scope="singleton"&gt;
            </programlisting>
            <para>The default scope for a bean is 'singleton'. An object with scope singleton is
                created only once per bean container. When requests are made to obtain an object for
                the correspond bean, the same object instance is always returned. By default, the
                singleton object is created during container initialization, however we may add
                lazy-init="true" to the bean tag to indicate that the object should not be created
                until a request for the object is made.</para>
            <para>Another scope we can use is 'prototype'. When a bean is marked with a scope of
                prototype, a new object instance is created for each request. Prototype objects are
                not created initially during container initialization.</para>
            <tip>
                <title>Choosing Bean Scope</title>
                <para>Deciding whether to use singleton or prototype scope  usually depends on
                    whether our object maintains state. If an object maintains state, we should use
                    scope prototype so that it is thread safe. For stateless objects (such as
                    services), we should use the singleton prototype. </para>
            </tip>
            <para>Besides the singleton and prototype scopes, Spring also provides the request,
                session, and global session scopes. Furthermore, you can create your own
                scope!</para>
        </section>
        <section role="NotInToc">
            <title>Recap</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Spring provides a configuration mechanism that allows us to define a
                            'recipe' for creating instances of a class. </para>
                    </listitem>
                    <listitem>
                        <para>We can use XML to provide bean configurations. A bean configuration is
                            given using the bean tag, and includes an id attribute to uniquely
                            identify the bean and a class attribute to indicate the class for the
                            object to create.</para>
                    </listitem>
                    <listitem>
                        <para>Using the property tag we can configure property values for primitive
                            types and collections. We can also configure dependencies of the object
                            (which are properties of other object types) using the ref tag or inner
                            beans.</para>
                    </listitem>
                    <listitem>
                        <para>The ability to configure dependencies external to the parent object is
                            the Inversion of Control pattern.</para>
                    </listitem>
                    <listitem>
                        <para>We can use the p-namespace as a shortcut for configuring
                            properties.</para>
                    </listitem>
                    <listitem>
                        <para>Spring allows us to inherit bean configuration using the parent
                            attribute. The configuration inherited by the child bean definition can
                            be overridden and added to. </para>
                    </listitem>
                    <listitem>
                        <para>In order to merge inherited collection configuration, we must specify
                            merge="true".</para>
                    </listitem>
                    <listitem>
                        <para>The objects created by Spring are managed within a container.
                            Generally there is a container for the whole application or each
                            application module. In addition, containers can be created for other
                            purposes.</para>
                    </listitem>
                    <listitem>
                        <para>The bean scope defines how long the created object will live. The
                            default scope of singleton means only one object will be created and
                            shared throughout the application lifecycle. With a scope of prototype,
                            a new object instance will be created each time a request is made to the
                            container.</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </section>
</chapter>
