<?xml version='1.0' encoding='UTF-8'?> 
<!--

    Copyright 2005-2014 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<chapter xml:id="controllers" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook"  version="5.0">    
    <title>Controllers</title>
    <section>
        <title>Introduction to Spring MVC </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Controllers</title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Controller Annotations </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <section>
            <title>Interceptors</title>
            <para>Coming Soon!</para>
            <!-- TODO: Add content here.
            -->
        </section>
    </section>
    <section>
        <title>Spring Views and the Common UIF View </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Spring Tags </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Binding and Validation </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <section>
            <title>Property Editors</title>
            <para>Coming Soon!</para>
            <!-- TODO: Add content here.
            -->
        </section>
        <section>
            <title>Security and Masking</title>
            <para>Coming Soon!</para>
            <!-- TODO: Add content here.
            -->
        </section>
        <section>
            <title>Bean Wrapper and ObjectPropertyUtils</title>
            <para>Coming Soon!</para>
            <!-- TODO: Add content here.
            -->
        </section>
    </section>
    <section>
        <title>Form Beans </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>UifControllerBase and UifFormBase </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <section>
            <title>Connecting the Controller with the View</title>
            <para>Coming Soon!</para>
            <!-- TODO: Add content here.
            -->
        </section>
    </section>
    <section>
        <title>Dialogs</title>
        <para>The KRAD framework provides the ability to build modal dialogs into a web application.
      Modal dialogs can improve the usability and flow of a web page. Dialogs allow the server-side
      controller to gather additional information from the user after the form is submitted, without
      having to change page.</para>
        <para>A common and simple example of a dialog is to confirm with the user before performing
      a potentially dangerous action. For Example, "Are you sure you want to delete?". In this
      simple example, the question is displayed in a lightbox. The user must select a response,
      which closes the lightbox, before they can interact again with the underlying page
      contents.</para>
        <para>KRAD dialogs support even more complex interactions with the user, with multiple
      components and controls, conditional logic, and rich styling. With KRAD, you can create
      re-usable dialog group components that enables rich styling (from CSS stylesheets) and user
      interaction, to pose questions and collect user responses. The dialogs support images, tables,
      declarative logic, checkboxes, radio buttons, dropdowns, and input fields (for example, for a
      user to provide a text description, with details for their response choice), or keyboard
      navigation. Dialogs also have the ability to progressively disclose questions and other UI
      choices depending on other selections made in the lightbox, to dynamically add to the content
      and re-size (up to a max, scrolling supported thereafter). Dialogs may be configured to pass
      the data collected in the form where it is available to the controller code.</para>
        <para>Multiple dialogs may be used on a single view. They can be stacked on each other or invoked separately
        depending on controller programmatic logic.</para>
        <para>KRAD also provides a canned set of pre-defined dialog groups. These pre-defined
      dialogs have convenient properties for easy customization. They may also be extended, just
      like any group, by adding components to the "items" property of the dialogGroup. </para>
      <section>
        <title>Using Dialogs in a View</title>
        <para>To use a dialog in a view requires the following three setup steps:</para>
        <orderedlist>
          <listitem><para>Define the dialog group (or use a pre-defined dialog group) in the view definition file.</para></listitem>
          <listitem><para>Declare the dialog group in the dialogList View property (also in the view definition).</para></listitem>
          <listitem><para>Invoke the dialog from the view controller.</para></listitem>
        </orderedlist>
        <para>First, let's take a look at a very simple example. This is one of the pre-defined KRAD
        dialogs.</para>
        <figure>
          <title>Header Text Example</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../images/KRAD_Guide/headerTextExample.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>To use this dialog in a view, simply declare it in the dialogList property of the
        view:</para>
        <programlisting linenumbering = "numbered">
&lt;bean id="MyTestView" parent="Uif-FormView"&gt;
  &lt;property name="dialogs"&gt;
    &lt;list&gt;
        &lt;bean id="mySensitiveDialog" parent="Uif-SensitiveData-DialogGroup"/&gt;
    &lt;/list&gt;
  &lt;/property&gt;</programlisting>
        <para>And then invoke it in your controller code:</para>
        <programlisting linenumbering = "numbered">
        // first check if the dialog has already been answered by the user
        if (!hasDialogBeenAnswered("mySensitiveDialog", form)){
            // redirect back to client to display lightbox
            return showDialog(dialog1, form, request, response);
        }
        // get the response entered by the user
        boolean areYouSure = getBooleanDialogResponse("mySensitiveDialog", form, request, response);</programlisting>
        <para>The code snippet above is from the controller method invoked by the action (set by the methodToCall 
          property on the action). This method is called when an action is performed on the
        page. It uses some methods inherited from UifControllerBase to manage the dialog.</para>
        <para>The first line of code checks to see if the dialog has been answered by the user
        during this page interaction. During this first pass, the dialog has not been answered, it
        hasn't even been displayed yet. So, showDialog() is called to return to the client and
        display the dialog. After the user interacts with the dialog choosing one of the options, we
        return back to the same controller method again. This time, the dialog has been answered, so
        the logic falls through and calls getBooleanDialogResponse() to determine the user's
        response.</para>
      </section>
      <section>
        <title>Creating a Dialog Group For a View</title>
        <para>Next, let's take a closer look at dialog groups. Any group defined in the view can be
        used as content in the lightbox. Just add a reference to it in the "dialogs" list property
        in the view definition. A DialogGroup provides some additionalproperties for convenience,
        but any group will do. It should be set to hidden unless you want the group displayed on the
        main page as well. So, the designer has a few options:</para>
        <itemizedlist><listitem><para>use a pre-defined KRAD dialog</para></listitem>
          <listitem><para>customize an existing dialog, changing any of the prompt text, the number of option buttons,
            the value of the option buttons, adds items to the group, add custom styling,...</para></listitem>
          <listitem><para>create your own custom, hidden group</para></listitem></itemizedlist>
        <para>Here is the bean definition for a DialogGroup. The dialogGroup is a hidden group with some additional
        properties for convenience.</para>
        <itemizedlist><listitem><para>prompt - the  message displayed to the user</para></listitem>
          <listitem><para>explanation - a textarea input to get additional textual response information (hidden by
            default)</para></listitem>
          <listitem><para>responseInputField - holds the value chosen by the user</para></listitem>
          <listitem><para>availableResponses - the choices to be displayed in the lightbox (ok/cancel, yes/no/maybe)</para></listitem>
          <listitem><para>reverseButtonOrder - determines the order the responses are displayed</para></listitem></itemizedlist>
        <para>The css class "uif-dialogGroup" provides the styling for the lightbox.</para>
        <programlisting linenumbering = "numbered">&lt;!-- Dialog Groups --&gt;
  &lt;bean id="Uif-DialogGroup" parent="Uif-DialogGroup-parentBean"/&gt;
  &lt;bean id="Uif-DialogGroup-parentBean" abstract="true" class="org.kuali.rice.krad.uif.container.DialogGroup"
        parent="Uif-VerticalBoxSection"&gt;
    &lt;property name="header"&gt;
      &lt;bean parent="Uif-HeaderThree"/&gt;
    &lt;/property&gt;
    &lt;property name="header.cssClasses" value="uif-dialogHeader"/&gt;
    &lt;property name="headerText" value=""/&gt;
    &lt;property name="hidden" value="true"/&gt;
    &lt;property name="promptText" value="Would You Like to Continue?"/&gt;
    &lt;property name="availableResponses"&gt;
      &lt;list&gt;
        &lt;bean parent="Uif-KeyLabelPair" p:key="Y" p:value="Yes"/&gt;
        &lt;bean parent="Uif-KeyLabelPair" p:key="N" p:value="No"/&gt;
      &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name="displayExplanation" value="false"/&gt;
    &lt;property name="reverseButtonOrder" value="false"/&gt;
    &lt;property name="prompt"&gt;
      &lt;bean parent="Uif-DialogPrompt"/&gt;
    &lt;/property&gt;
    &lt;property name="explanation"&gt;
      &lt;bean parent="Uif-DialogExplanation"/&gt;
    &lt;/property&gt;
    &lt;property name="responseInputField"&gt;
      &lt;bean parent="Uif-DialogResponse"&gt;
        &lt;!-- &lt;property name="cssClasses"&gt;
          &lt;list merge="true"&gt;
            &lt;value&gt;uif-action uif-primaryActionButton uif-boxLayoutHorizontalItem&lt;/value&gt;
          &lt;/list&gt;
        &lt;/property&gt;--&gt;
      &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="cssClasses"&gt;
      &lt;list merge="true"&gt;
        &lt;value&gt;uif-dialogGroup&lt;/value&gt;
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
        <para>The explanation field is a TextArea input by default. This can be overridden locally to be any input.
        KRAD pre-defined dialogs override this field to be either a checkbox group or radio button group.</para>
        <para>The number of response choices and their values are customized by overriding the availableResponses property.</para>
      </section>
      <section>
        <title>Managing Dialogs from a Controller</title>
        <para>UifControllerBase contains common methods for managing dialogs. </para>
        <itemizedlist><listitem><para>ModelAndView showDialog(dialogId, form, request, response) returns the conversation back to
            the client by displaying the dialog content in a lightbox.</para></listitem>
          <listitem><para>boolean hasDialogBeenDisplayed(String dialogId, UifFormBase form)Returns whether the dialog has
          been presented to the user during this conversation.</para></listitem>
          <listitem><para>boolean hasDialogBeenDisplayed(String dialogId, UifFormBase form)Returns whether the dialog
            has already been answered by the user during this conversation. This method also
            performs hasDialogBeenDisplayed() prior to checking the answered status. This method is
            the preferred choice because it can test for both cases of whether the dialog has been
            displayed, and whether it has been answered.</para></listitem>
          <listitem><para>boolean getBooleanDialogResponse(dialogId, form, request, response) If the dialog has already
            been answered by the user, returns true if the user chose an affirmative response, false
            if negative response was chosen. Also returns false if the dialog has not been
            answered.</para></listitem>
          <listitem><para>String getStringDialogResponse(dialogId, form, request, response) If the dialog has already
            been answered by the user, returns the string value of the option chosen by the
            user.</para></listitem></itemizedlist>
        <para>The DialogManager class encapsulates this functionality and provides additional methods for more detailed
          dialog management.</para>
        <para><programlisting>boolean getBooleanDialogResponse(String dialogId, UifFormBase form, HttpServletRequest
        request, HttpServletResponse response)</programlisting></para>
      </section>
      <section>
        <title>Invoking a Dialog Entirely from the Client</title>
        <para></para>
        <!-- TODO: Add content here.  -->
      </section>
      <section>
        <title>Pre-Defined Dialog Groups</title>
        <para>For convenience, the KRAD UI Framework contains several pre-built dialog groups. </para>
        <itemizedlist>
          <listitem><para>Uif-OK-Cancel-DialogGroup A basic dialog with the header text set as
          "Please Confirm to Continue". The prompt text default is "Would You Like to Continue?". Available responses are
          "OK" and "Cancel"</para></listitem>
          <listitem><para>Uif-Yes-No-DialogGroup A basic dialog with the header text set to "Please Select". The prompt
            text default is "Would You Like to Continue?". Available responses are "Yes" and
            "No"</para></listitem>
          <listitem><para>Uif-True-False-DialogGroup A basic dialog with the header text set to "Please select from the
            values below". The prompt text default is "Would You Like to Continue?". Available
            responses are "True" and "False" </para></listitem>
          <listitem><para>Uif-SensitiveData-DialogGroup A basic dialog with the header text set to "Warning: Sensitive
            Data". The prompt text default is ""Potentially sensitive data was found on the
            document. Do you wish to continue?". Available responses are "Yes" and "No" </para></listitem>
          <listitem><para>Uif-Checkbox-DialogGroup A basic dialog with the checkbox control for the explanation. The
            default responses are "OK" and "Cancel"</para>
          </listitem>
          <listitem><para>Uif-RadioButton-DialogGroup A basic dialog with the radio button control for the explanation.
          The default responses are "OK" and "Cancel"</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Customizing Dialog Groups</title>
        <para></para>
        <!-- TODO: Add content here.  -->
      </section>
    </section>
    <section>
        <title>Error, Info, and Warning Messages </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <section>
            <title>Growls</title>
            <para>Coming Soon!</para>
            <!-- TODO: Add content here.
            -->
        </section>
    </section>
    <section>
        <title>Exception Handling </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Session Support and the User Session </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Servlet Configuration </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Using Controllers to Allow Guest Access</title>
        <para>
            Some views might have to be exposed to users that does not have a Rice user. In these cases we can configure
            certain views using controllers to allow guest user access.
        </para>
        <para>
            To bypass the normal login mechanism you can change the <emphasis role="keyword">BootstrapFilter</emphasis>
            configuration.  The <emphasis role="keyword">BootstrapFilter</emphasis> is a Rice filter which at runtime
            reads a series of filter configurations, constructs and initializes those filters, and invokes them when it
            is invoked. This allows runtime user configuration of arbitrary filters in the webapp context.  The
            <emphasis role="keyword">BootstrapFilter</emphasis> configuration allows for excluding certain requests.
            The following example excludes the <emphasis role="keyword">kradguest</emphasis> servlet requests from the
            <emphasis role="keyword">DummyLoginFilter</emphasis> and adds an
            <emphasis role="keyword">AutoLoginFilter</emphasis> for those requests.  The
            <emphasis role="keyword">AutoLoginFilter</emphasis> allows automatic login with the user specified via the
            filter init parameter.  With this setup, any requests to the <emphasis role="keyword">kradguest</emphasis>
            servlet will be automatically logged in as guest and bypass the
            <emphasis role="keyword">DummyLoginFilter</emphasis>.
            <programlisting>&lt;param name="filter.login.class"&gt;org.kuali.rice.kew.web.DummyLoginFilter&lt;/param&gt;
&lt;param name="filtermapping.login.1"&gt;/*&lt;/param&gt;
&lt;param name="filterexclude.login"&gt;.*/kr-kradguest/.*&lt;/param&gt;

&lt;param name="filter.guestlogin.class"&gt;org.kuali.rice.krad.web.filter.AutoLoginFilter&lt;/param&gt;
&lt;param name="filtermapping.guestlogin.2"&gt;/kr-kradguest/*&lt;/param&gt;
&lt;param name="filter.guestlogin.autouser"&gt;guest&lt;/param&gt;</programlisting>
        </para>
        <para>
            KRAD has configured a <emphasis role="keyword">kradguest</emphasis> servlet mapping that can be used for the
            purpose of allowing guest access.  The setup of controllers mapped to the
            <emphasis role="keyword">kradguest</emphasis> servlet can be done in the
            <filename>kradguest-servlet.xml</filename>
            <programlisting>&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-2.0.xsd"&gt;

    &lt;import resource="krad-base-servlet.xml"/&gt;

    &lt;!-- Add controller beans for any requests that the krad guest servlet must handle --&gt;
    &lt;bean id="UifComponentsTestController" class="edu.sampleu.demo.kitchensink.UifGuestController"/&gt;
&lt;/beans&gt;</programlisting>
        </para>
        <para>
            You can map any controller to the <emphasis role="keyword">kradguest</emphasis> servlet but view access is
            still not restricted. To do this you can extend your controller and add a check for the views that must
            allow guest access in the controller start method.
            <programlisting>@Controller
@RequestMapping(value = "<emphasis role="bold">/guestviews"</emphasis>)
public class UifGuestController extends UifControllerBase {

    /**
     * @see org.kuali.rice.krad.web.controller.UifControllerBase#createInitialForm(javax.servlet.http.HttpServletRequest)
     */
    @Override
    protected UifComponentsTestForm createInitialForm(HttpServletRequest request) {
        return new UifComponentsTestForm();
    }

    /**
     *  Initial method called when requesting new view
     *
     *  &lt;p&gt;
     *  For guest access we check that only certain views can be called through this controller.
     *  &lt;/p&gt;
     *
     * @param form - model
     * @param result - binding result
     * @param request - servlet request
     * @param response - servlet response
     * @return
     */
    @Override
    @RequestMapping(params = "methodToCall=start")
    public ModelAndView start(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,
        HttpServletRequest request, HttpServletResponse response) {
        <emphasis role="bold">if (!form.getViewId().equals("UifGuestUserView")) {
            throw new RuntimeException("Guest user not allowed to acces this view : " + form.getViewId());
        }</emphasis>
        return super.start(form,result,request,response);
    }
}</programlisting>
        </para>
        <para>
            With the setup as described above only requests to
            <emphasis role="bold">kr-kradguest/guestviews?viewId=UifGuestUserView&amp;methodToCall=start</emphasis>
            will be logged in automatically as guest.
        </para>
    </section>
</chapter>
