<?xml version="1.0" encoding="UTF-8"?>
<!--

Copyright 2005-2014 The Kuali Foundation

Licensed under the Educational Community License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.opensource.org/licenses/ecl2.php

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <info>
    <title>Kuali Rice ${project.version} Release Notes</title>
    <edition>${project.version}</edition>
    <pubdate>Released: ${docbook.build.timestamp}</pubdate>
  </info>
  <section xml:id="overview" xreflabel="Overview">
    <title>Overview</title>
    <para>Welcome to Rice ${project.version}! </para>
    <section>
      <title>Release Highlights</title>
      <para>This release consists of a number of security fixes to both the KNS as well as KRAD, including the following:</para>
      <para><itemizedlist>
        <listitem>
          <para>Cross-Site Request Forgery (CSRF) protection added to the KNS</para>
        </listitem>
        <listitem>
          <para>Cross-Site Request Forgery (CSRF) protection added to the KRAD platform</para>
        </listitem>
        <listitem>
          <para>Fixed a number of XSS vulnerabilities in the KNS and KRAD</para>
        </listitem>
        <listitem>
          <para>Upgraded commons-fileupload to version 1.3.2</para>
        </listitem>
      </itemizedlist>
      </para>
      <para>Depending on your use of the KNS and/or KRAD this may be a drop-in replacement. However see below for
        information on potential impact related to the CSRF implementation.
      </para>
      <para>You will also want to be sure that if you
        have established dependencies in your own project to commons-fileupload that you upgrade those as well.
        The specific vulnerability in commons-fileupload is detailed here:
        <link xlink:href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3092">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3092</link>
      </para>
    </section>
    <section>
      <title>Download</title>
      <para>Kuali Rice ${project.version} can be downloaded from the Rice website at <link xlink:show="new" xlink:href="http://kuali.org/rice/download">http://kuali.org/rice/download</link>.</para>
      <para>There are three different distributions of Rice available: source, binary and
        server. Please read the <link xlink:href="http://site.kuali.org/rice/${project.version}/reference/html/IG.html">Installation Guide</link> for
        more details on each of these distributions.</para>
      <para>Applications can also consume Rice from the maven site at <link
              xlink:href="http://search.maven.org/#search|ga|1|org.kuali.rice"
              >http://search.maven.org/#search|ga|1|org.kuali.rice</link>.</para>
    </section>
    <section>
      <title>Documentation</title>
      <para>API Documentation can be found at <link xlink:show="new" xlink:href="http://site.kuali.org/rice/${project.version}/apidocs/index.html">http://site.kuali.org/rice/${project.version}/apidocs/index.html</link></para>
      <para>Formal documentation can be found at <link xlink:show="new"
                                                       xlink:href="http://site.kuali.org/rice/${project.version}/reference/html/index.html"
              >http://site.kuali.org/rice/${project.version}/reference/html/index.html</link>.
        This documentation is still in the process of review and update  which will continue
        through subsequent releases, so please follow the notes in each document to report
        any outdated information.</para>
    </section>
    <section>
      <title>Contact</title>
      <para>If you encounter any difficulty, please don't hesitate to contact the Rice team on
        our public collaboration mailing list at <email>rice.collab@kuali.org</email>.
        Please indicate that you are using the ${project.version} version of Rice.</para>
    </section>
  </section>

  <section xml:id="impacting_changes">
    <title>Impacting Changes</title>
    <section>
      <title>CSRF Protection for KNS Applications</title>
      <para>This release implements CSRF protection within the KNS. For most standard uses of the framework, no action
      will be required since the fix for this issue has been incorporated into the KNS's <code>page.tag</code> library.
      However, if you are using the KNS with custom JSP pages or HTML and have custom <code>&lt;form&gt;</code> elements
      then you will need to ensure that you are submitting a hidden form input field that contains the CSRF token.</para>
      <para>The CSRF token is stored in the session in an attribute called <code>csrfSessionToken</code>. There is a
      new TAG library in the set of KNS tags called "csrf" which will insert the hidden form field and can be used as
      follows:</para>
      <programlisting>&lt;kul:csrf/&gt;</programlisting>
      <para>This simply resolves to the following HTML:</para>
      <programlisting>&lt;input type="hidden" name="csrfToken" value="${sessionScope.csrfSessionToken}"/&gt;</programlisting>
    </section>
    <section>
      <title>CSRF Protection for KRAD Applications</title>
      <para>This release implements CSRF protection within KRAD. For most standard uses of the framework, no action
        will be required since the fix for this issue has been incorporated into KRAD's standard <code>form.ftl</code>
        freemarker template. However, if you are using KRAD with custom freemarker pages and creating forms without
        using the supplied KRAD UIF form component, then you will need to ensure that you are submitting a hidden form
        input field that contains the CSRF token.</para>
      <para>In order to do this, a custom freemarker template has been implemented that will insert the CSRF form field
        for you. It can be used as follows:</para>
      <programlisting>&lt;@krad.csrfToken/&gt;</programlisting>
      <para>This simply resolves to the following:</para>
      <programlisting>&lt;input type="hidden" name="csrfToken" value="${KualiForm.csrfToken!}"/&gt;</programlisting>
    </section>
    <section>
      <title>Customizing CSRF Protection</title>
      <para>If you want to exempt certain paths or entirely disable CSRF protection in your KNS or KRAD application,
        there are some options available to you.</para>
      <para>The following config parameters can be set:</para>
      <para><itemizedlist>
      <listitem>
        <para><code>csrf.enabled</code> - enable or disable CSRF protection globally, defaults to “true” if not
          specified</para>
      </listitem>
      <listitem>
        <para><code>csrf.exempt.paths</code> - defaults to no paths exemptions, otherwise this is a comma-separated list
          of partial path matches for which CSRF will not be performed</para>
      </listitem>
      </itemizedlist></para>
      <para>Alternatively, System Parameters can be created if you need to customize or configure these at runtime.
        Note that, if defined, the System Parameters will override any config settings. The system parameters are as
       follows (both use the <code>KR-SYS</code> namespace and the <code>All</code> component code).</para>
      <para><itemizedlist>
      <listitem>
      <para><code>CSRF_ENABLED_IND</code> - as per csrf.enabled</para>
      </listitem>
      <listitem>
        <para><code>CSRF_EXEMPT_PATHS</code> - as per csrf.exempt.paths </para>
      </listitem>
    </itemizedlist></para>
    </section>
  </section>
</article>